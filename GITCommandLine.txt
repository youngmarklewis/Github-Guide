Intro to the Command Line - GIT 
https://www.youtube.com/watch?v=oK8EvVeVltE


Popular commands:
clear (clears the current screen)
cd (change directory)
pwd (print working directory)
ls (lists contents of the current working directory)
open . (opens the current directory in the finder)
cd .. (returns user up / back one directory)
cd desktop (changes the current working directory to desktop)
cd documents (changes the current working directory to documents)
cd downloads (changes the current working directory to documents)
cd des + tab key (auto completes a filename e.g. in this example changes to Desktop/)
up and down arrow (allows user to revisit commands previously used)
cd [space] (allows user to physically drag in a folder location from the finder window)
ls -all (lists contents of the current directory, the argument -all presents more detailed information)
ls -all (also shows hidden files)


Cloning Repo

Create a new repository (you can also do this for an existing repository)
Once created copy the url and add .git e.g. https://github.com/youngmarklewis/GIT-Push-Pull.git
cd to a folder of your choosing e.g. /Users/Young/Documents/JavaScript
In the terminal window type 'git clone https://github.com/youngmarklewis/GIT-Push-Pull.git'
Confirmation message is recieved: 
'Cloning into 'GIT-Push-Pull'...
remote: Enumerating objects: 3, done.
remote: Counting objects: 100% (3/3), done.
remote: Compressing objects: 100% (2/2), done.
remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0
Unpacking objects: 100% (3/3), done.'
Check the folder location

Editing the file

Drag the containing folder to VS Code icon in the taskbar. This will open VS Code
Make any changes to the Readme file and hit save
Back in the terminal navigate to the directory above and type: git status /Users/Young/Documents/JavaScript/GIT-Push-Pull
Terminal confirms that the file has been changed 'modified: README.md'
Next commit all the changes by running the command: git commit -a (commit all -a argument -a)
Or with a message: git commit -a -m "Adding a change" (commit all with the arguments -a -m)
You can view the change log by entering git: log (Exit the log by typing ':' then shift + q

Push and Pull

Pushing is the act of sending to Github
Pulling is the act of receiving from Github. When would you want to pull from Github? This could occur if someone else was working on your repository and they push some changes to Github (so you don't have those changes on your laptop) Then you would want to pull from Github to your local PC to get those changes
Remote - Is a duplicate instance of your repository that lives somewhere on the Github remote server
Typing: 'git remote' will list all the remotes associated with your project e.g. origin 
Typing: 'git remote -v' shows the url of origin
Typing: 'git push origin master' will prompt the user for their username and password
Changes are then pushed to the master branch of the repository 

Git init and git add

This is the process of uploading code files from your own laptop to Github to make a repository
In terminal go to the folder GIT-init (example folder) type: 'git status' 
The user will be told that GIT-init is not a git repository
Type: 'git init'
The empty git repository GIT-init is now initialised, check this by running 'git status'
Files in GIT-init are displayed but these have not been committed. In Github committing and saving a file are the same thing, when working locally however these are seperate steps:
1. Save
2. Add (places files in the 'staging area')
3. Commit (only commits changes that are in the 'staging area')

Type: 'git add nameoffile.txt'
Type: 'git status' Observe that the file now appears under 'changes to be committed' 
Type: 'git commit -m "adding a new file"'
Type: 'git add .' to add anything (all) that Git detects as a change or a new file to the staging area
Follow this with 'git commit -m "adding a new file"' to commit changes

The user now needs to go to Github.com to add the remote by creating the repository

